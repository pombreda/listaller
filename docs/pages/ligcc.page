<page xmlns="http://projectmallard.org/1.0/" type="topic" id="ligcc">
<info>
    <link type="topic" xref="app-development"/>
    <credit type="author">
        <name>Matthias Klumpp</name>
        <email>matthias@tenstral.net</email>
        <years>2012</years>
    </credit>
    <credit>
        <name>The Autopackage Team</name>
    </credit>

    <desc>Unlike Windows, Linux generally does not support “build on newer, run on older”
    development. In other words, the process of compiling the same program on an older system
    and a newer system can produce different binaries with different requirements.</desc>
</info>

<title>The Ligcc tools</title>

<section id="whatis">
<title>What is ligcc?</title>

<p>Ligcc is a wrapper around gcc. It allows you to create more portable executables by doing three things:</p>
<list>
    <item>
        <p>Forces the linker to link against older glibc symbols. Users who are using an older version of glibc will no
        longer get <output>undefined symbol GLIBC_2.4 in /lib/libc.so</output>-style error messages.</p>
    </item>

    <item><p>Allows you to easily statically link to any other library.</p></item>
    <item>
        <p>Automatically removes bogus dependencies. For example, your program uses libfoo. libfoo uses libpng internally,
        but your app does not. Yet the pkg-config file for libfoo specifies <code>-lfoo -lpng</code> is linker parameters. And tadaa
        - you now have a bogus dependency on libpng! Ligcc automatically removes the -lpng for you if your app doesn't use libpng
        directly.</p>
        <note style="important">
            <p>It is recommended that you use binutils 2.15.94 or later to compile programs, recent versions of
            ld support the <input>–as-needed</input> argument, which does a much better job than our own dependency stripper,
            and is faster too.</p>
        </note>
    </item>

    <item>
        <p>Add <file>$ORIGIN/../lib</file> to the binary's library search path. <file>$ORIGIN</file> is the directory in which the
        binary exists. This ensures that your binary can find its library dependencies if they are placed in the <file>'lib'</file> folder
        under the same prefix. You can drop any dependency library you want in <file>$PREFIX/lib/</file>. Your binary can find those libraries
        without messing with <file>$LD_LIBRARY_PATH</file>.</p>
    </item>

    <item>
        <p>If you set <file>$LIBUILD_PROJECTNAME</file>, ligcc will also add <file>$ORIGIN/../lib/$LIBUILD_PROJECTNAME</file> to
        the library search path.</p>
    </item>

</list>

</section>

<section id="howto">
<title>How to use ligcc?</title>

<p>Use ligcc just like how you use gcc:</p>
<example>
    <screen>
        <output style="prompt">[earth@sun] </output><input>ligcc foo.c -o foo</input>
        <output style="prompt">[earth@sun] </output><input>lig++ bar.cpp -o bar</input></screen>
</example>

<p>Recommended way:</p>
<listing><code mime="application/x-shellscript"><![CDATA[export CC=ligcc
export CXX=lig++
./configure
make]]></code>
</listing>
<p>or</p>
<listing><code mime="application/x-shellscript">make CC=ligcc CXX=lig++</code></listing>

<p>There are several environment variables that change ligcc's behavior:</p>

<terms>
  <item>
    <title><sys>LIBUILD_PATH</sys></title>
    <p>Use this as the include dir for the ligcc headers. Default value: <file>$PREFIX/include/libuild</file>
    (where <file>$PREFIX</file> is the prefix in which libuild is installed)</p>
  </item>

  <item>
    <title><sys>LIBUILD_CC</sys></title>
    <p>Use the specified C compiler. Default value: <cmd>gcc</cmd></p>
  </item>

  <item>
    <title><sys>LIBUILD_CXX1</sys></title>
    <p>Use the specified C++ compiler. Default value: <cmd>g++</cmd></p>
  </item>

  <item>
    <title><sys>LIBUILD_STATIC_X</sys></title>
    <p>If set to 1, then libuild will statically link some X extension libraries.</p>
  </item>

  <item>
    <title><sys>LIBUILD_BOGUS_DEPS</sys></title>
    <p>Specify a list of whitespace-seperated bogus library dependencies (like: X11 ICE png).
    These libraries will not be linked against. This option is useful if you want to specify bogus dependencies manually
    because the automatic bogus dependency stripper doesn't work correctly for your project (see below).</p>
  </item>

  <item>
    <title><sys>LIBUILD_DISABLE_BOGUS_DETECTOR</sys></title>
    <p>If set to 1, disables the automatic bogus dependency stripper. This is useful when linking to libraries don't have correct
        <sys>DT_NEEDED</sys> entries, like GTK 1.2. GTK 1.2 uses <file>libX11.so</file> internally, but it's not linked with
        <input>-lX11</input>. Instead, <cmd>gtk-config –libs</cmd> returns <input>-lgtk -lX11</input> or something.
        If your app doesn't use xlib internally, then our bogus dependency stripper will strip the <input>-lX11</input> argument.
        Linking will then fail.
    </p>
    <p>The built-in bogus dependency stripper is not used if you have a recent version of binutils, which supports
    <cmd>ld –as-needed</cmd> (it'll use binutil's native support for bogus dependency stripping instead).
    So you should get use a recent version of binutils if your ld doesn't already support that argument.</p>
  </item>

  <item>
    <title><sys>LIBUILD_NOT_BOGUS</sys></title>
    <p>If you want to use the automatic bogus dependency dectector anyway (using <cmd>ld –asneeded</cmd>), then you can specify a list
    of dependencies here that are not bogus with this environment variable. Example:</p>
    <listing><code mime="application/x-shellscript">export LIBUILD_NOT_BOGUS="X11 ICE png"</code></listing>
  </item>

  <item>
    <title><sys>LIBUILD_STATIC</sys></title>
    <p>Specify a list of whitespace-seperated libraries to statically link to (like: <input>popt z</input>). You can also explicitly
    specify a filename to the static library. Examples:</p>
    <listing><code mime="application/x-shellscript"><![CDATA[export LIBUILD_STATIC="popt z"
export LIBUILD_STATIC="popt=/usr/lib/libpopt.a"]]></code></listing>
  </item>

  <item>
    <title><sys>LIBUILD_STATIC_LIBGCC</sys></title>
    <p>If set to 1, link all binaries with <input>-static-libgcc</input>. See the gcc info page for more info about this option.</p>
  </item>

  <item>
    <title><sys>LIBUILD_PROJECTNAME</sys></title>
    <p>If non-empty, ligcc will add <file>$ORIGIN/../lib/$LIBUILD_PROJECTNAME</file> to the library search path.</p>
  </item>

  <item>
    <title><sys>LIBUILD_INCLUDE</sys></title>
    <p>Prepend the specified directory to the compiler's header search path. The compiler will search this directory first,
    before searching any other directory. This is useful in combination with the older GTK headers package.
    You can specify multiple directories, seperated by a <input>:</input>, just like the <file>$PATH</file> environment
    variable. If the order of the -I flags is important for your application, you can replace paths by using <input>/old/path=/new/path</input>.</p>
  </item>

  <item>
    <title><sys>LIBUILD_RESOLVE_LIBPATH</sys></title>
    <p>A space-seperated list of (Perl) regular expressions which specify the libraries whose path must be resolved into absolute paths.</p>
    <p>Internally, ligcc reorders the linking arguments that are to be passed to gcc (for various reasons).
    This can cause problems when linking certain static libraries (for example, static WxWidgets libraries).
    But that can be worked around by using full path names for static libraries (e.g. turning <input>-lfoo</input> parameters into
<file>/usr/lib/full-path-to/foo.a</file>).</p>
  </item>

</terms>



</section>

</page>
