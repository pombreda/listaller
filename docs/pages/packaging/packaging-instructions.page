<?xml version="1.0"?>
<page xmlns="http://projectmallard.org/1.0/" type="topic" id="packaging-instructions">
<info>
    <link type="topic" xref="packaging"/>

    <credit type="author">
        <name>Matthias Klumpp</name>
        <email>matthias@tenstral.net</email>
        <years>2012</years>
    </credit>

    <desc>Building IPK packages is really simple. Here you can find the basic workflow of creating Listaller packages.</desc>
</info>

<title>Building Listaller Packages</title>

<p>The following instructions will help you creating cross-distro IPK packages for your own application.
Please note that Listaller is designed to install applications, so IPK packages will only install <em>applications</em>.
Packaging shared libraries using IPK packages is a very bad idea, and although it might be possible, we don't want shared libs packaged
in IPK packages. If you have a shared library, you can create a native distribution package and distribute it as DEB/RPM.</p>

<section id="prepare">
<title>Prepare your application</title>

       <p>Your application needs to meet some special requirements to be installed on a wide variety of different Linux distributions.
       (E.g. it must be relocatable) You can read the <code xref="app-development">application development</code> documents for more information
       on this step.</p>

</section>

<section id="packaging-dir">
<title>Set up the packaging info dir</title>

       <p>To create a Listaller IPK package, you first need to create a directory containing information about your application and how
       to build it. The directory should be at toplevel of your source tree (but it does not have to be there) and it should be named
       <file>ipkinstall</file>. The directory has to contain a <file>pkoptions</file> file, which defines some options for the package build,
       e.g. if Listaller should try to find dependencies automatically. A minimalistic <file>pkoptions</file>-file might look like this one:</p>
       <code mime="message/rfc822"><![CDATA[Version: 1.1

AutoFindDeps: true]]></code>

       <p>The <em>Version</em> field should reflect the IPK standard version this package will be build for and NOT the version of your application.</p>

       <p>Other files in the IPK source directory are DOAP data for your application (<file>appname.doap</file>), a list of files which should be
       installed (<file>files-current.list</file>), a Makefile containing rules how to build your app from source (<file>build.rules</file>)
       and a file describing the dependencies of your application (<file>dependencies.list</file>).
       All files except for the Makefile and the dependency list are required and have to be present. In the following sections
       we will show you the basic stuff you can do with these files and how you create them.</p>

</section>

<section id="doap-data">
<title>Create DOAP data</title>

       <p>Listaller uses <link href="https://github.com/edumbill/doap/wiki/">DOAP</link> to fetch information about your project.
       You should already have a DOAP description of your project. (it is required e.g. for all GNOME projects and many other projects use it already)</p>

       <p>If you don't have DOAP data already, you can generate it, e.g. using <link href="http://crschmidt.net/semweb/doapamatic/">DOAP-A-Matic</link> or another tool.
       For more information about DOAP, you can read <link href="http://www.oss-watch.ac.uk/resources/doap.xml">this document</link>.</p>

       <p>After you generated the data, save it as <file>*appname*.doap</file> in your IPK source dir, where <code>*appname*</code>
       should be replaced with the name of your application in lowercase. Other options are linking the DOAP file to your IPK source-dir
       or writing a script which auto-generates the sourcedir when you want to build the IPK package.
       (if you don't want to store the DOAP data in the IPK-src dir)</p>

</section>

<section id="filelist">
<title>Create file listings</title>

       <p>Now you need to write a list of the files your application wants to install, so Listaller can add them to the package and copy them
       to the right locations, when the setup is executed. IPK packages support multiarch setups, so you can define files which have to be
       installed by architecture, using <file>files-*arch*.list</file> file-lists, where <code>*arch*</code> is the architecture these files
       belong to. (e.g. ix86, amd64, …) If <code>*arch*</code> is <code>all</code>, files in this file-list will get installed on all
       architectures.</p>

       <p>You can also make Listaller pick the current system architecture and create a package for it. This is usefull if you don't package binary
       data which is already there, but instead build an IPK package from source. In this case, the file-list needs to be named <file>files-current.list</file>.
       Files mentioned in this listing will get installed on the current architecture. This is the most common case when building an IPK package.</p>

       <p>An IPK file-list can look like this:</p>
       <code><![CDATA[# IPK file list for FooBar

:: %APP%
FooBar.desktop
:: %INST%
foo-bar
*.html
*.txt
:: %INST%/data
data/*
:: %ICON-16%
icons/16x16.png foobar.png
:: %ICON-32%
icons/32x32.png foobar.png
:: %ICON-64%
icons/64x64.png foobar.png
:: %ICON-128%
icons/128x128.png foobar.png]]></code>

       <p>Lines starting with a <em>::</em> define the destination directory on the target machine. You should always use a Listaller directory
       variable there. Absolute paths are possible, but will lower the trust level for your package and will make private package installations impossible.
       You should in general not use absolute paths. After defining the target directory, you can add a list files which should be installed
       there, relatively to your source directory. Wildcards are allowed in filenames.</p>

       <note style="tip">
	       <p>By default, Listaller uss the directory below <file>ipkinstall</file> as source-directory, but you can change this setting
	       by using the <code>FilesRoot</code> field in <file>pkoptions</file></p>
       </note>

</section>

<section id="finetuning">
<title>Some finetuning</title>

       <p>Do some manual tweaks if needed.</p>

       <note style="warning">
	       <p>The documentation is not yet complete. You may want to help extending it.</p>
       </note>

</section>

<section id="build">
<title>Build the package</title>

       <p>You are now ready to build your IPK package! Just make sure Listaller's command-line tools are installed, then change to the
       directory below the <file>ipkinstall</file> dir and execute:</p>
       <screen>
	       <output style="prompt">[earth@sun/foobar] </output><input>lipkgen -b</input></screen>

       <p>The build tool should now create an IPK package in the directory below your current dir, which contains all things needed to run
       your application.</p>

       <p>We absolutely encourage you to sign your package with your public GPG key. If you don't sign it, Listaller will consider the package
       as dangerous and GUIs might show a warning message when users want to install the package. To sign the package, just append
      <input>–sign</input> to the build options:</p>
      <screen>
	       <output style="prompt">[earth@sun/foobar] </output><input>lipkgen -b --sign</input></screen>

       <p>There are also some other flags you can apply to modify the behaviour of <cmd>lipkgen</cmd>. If you are interested, you can read the
       manpage. Usually the extra options should not be needed.</p>

</section>

<section id="distribute">
<title>Distribute the package</title>

       <p>You can now publish your (signed) package anywhere on the web and have users install it using Listaller.
       Later, you might want to set-up and update-source for your software, so all users stay up-to-date.</p>

</section>

</page>
