<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Listaller.ent">
%BOOK_ENTITIES;
]>

<section id="sect-Listaller-Specs-DepTypes">
	<title>Dependency Definitions</title>
	<para>Description how Listaller gets information about software dependencies and how the dependency-data is handled internally.</para>

	<section id="spec-deptypes-rationale">
		<title>Rationale</title>

		<para>
			Listaller distinguishes between so-called <emphasis>Framework</emphasis>-dependencies and <emphasis>Module</emphasis>-dependencies to simplify dependency-solving and to reflect the
			organization of software on a Linux system.
		</para>
		<para>
			Module dependencies describe a certain software packages and the things it exposes to the public for other applications to use. In other words, a module
			may provide things like icons, shared libraries, Python modules, binaries etc. which have a public API and are used by other apps.
			You may think of modules as a fancy runtime-version of a pkg-config pc-file, if your software is just providing a library.
		</para>
		<para>
			Modules are described by module-info files, which are usually generated and provided by upstream projects. However, because many projects don't ship
			module-info files yet, Listaller provides some of these files on it's own.
		</para>
		<para>
			Frameworks, on the other hand, are defined by the distributor and upstream project. A framework is basically a collection of modules, and a larger
			"umbrella dependency" an IPK package can depend on. For example, the <literal>GNOME3</literal> framework provides <literal>GLib2</literal>,
			<literal>GTK+3</literal>, <literal>Clutter</literal>, <literal>GNOME-Shell, </literal><literal>WebKitGtk</literal>, etc. An IPK package which makes
			use of this framework may then simply depend on a version of the <literal>GNOME3</literal> platform.
		</para>
		<para>
			Framework files are also defined by framework-info files, which look very similar to module-info files. Framework files also declare which modules they depend
			on and are usually shipped in a metapackage of the distribution which depends on all the required framework components.
			It may also be shipped by upstream in one software package which depends on all the other parts to run.
		</para>
		<para>
			Listaller will usually not attempt to satisfy framework dependencies from 3rd-party sources. If the distribution does not ship the minimum version of
			a framework in it's repositories, the IPK package installation will fail with a nice error message describing which framework is missing.
		</para>
		<para>
			Listaller provides a set of internal framework/module definitions. These files are always overridden by files placed in the global system location.
			Files there will also override custom-made module-info files which were written by the IPK package author (upstream application developer).
		</para>
		<para>
			If framework or module description files are missing, please file a bug at the upstream project providing the framework, or ask the Listaller Project for inclusion.
		</para>
	</section>

	<section id="spec-deptypes-filesystem-location">
		<title>Dependency description locations</title>

		<para>
			Upstream project should install their module-info files named <filename>&lt;id&gt;.module</filename> in the system module location
			at <filename>/usr/share/modules</filename> (while &lt;id&gt; is the module's unique id-name). Frameworks are installed in <filename>/usr/share/modules/frameworks</filename>
			(replace <filename>/usr</filename> with you prefix)
		</para>
		<para>
			Listaller stores internal information about some modules and frameworks in <filename>/usr/share/listaller/modules</filename>.
			The components associated with the framework/module info don't have to be present, since the description files contain
			hints how to install them.
			Files in the global system location take precedence over anything Listaller ships by default.
		</para>
		<para>
			The modules defined in the system's <filename>modules/</filename> folder override all modules defined in Listaller packages which have the same name. The same applies
			to frameworks, if they are shipped with Listaller packages (they are automatically included in packages since IPKv2.0).
		</para>
	</section>

	<section id="spec-deptypes-schema">
		<title>Framework file schema</title>
		<para>
			Framework and Module files are simple textfiles with the file extensions <filename>.framework</filename> or <filename>.module</filename>, depending on their type. The file contents
			are similar, but some elements are specific for frameworks or modules, e.g. only modules can have an element of the type <code>Feed</code>.
		</para>
		<para>
			Ideally, upstreams should ship a framework description file, and install it to the shared framework directory.
		</para>
		<para>A Framework file may look like this:</para>
		<programlisting language="Debian Control">
<![CDATA[# The KDE4 base libraries

ID: KDELibs4
Version: shell$ kde4-config --version
 prefix$ "KDE: "
Binaries: kde4-config
 kde-open
ExtraLibSearchPath: %SYS_LIB%/kde4
Libraries: kio_file.so
 libkdeui.so.5
 libsoprano.so.4
 libthreadweaver.so.4
 libsolid.so.4]]>
		</programlisting>
		<para>
			The <code>ID</code> element defines an unique identifier for this component. Framework IDs start with an upper-cased letter, while Modules are lower-cased.
		</para>

		<warning>
			<para>The documentation is not yet complete. You may want to help extending it.</para>
		</warning>
	</section>

	<section id="spec-deptypes-default-frameworks">
		<title>Frameworks</title>
		<para>Currently, the following <emphasis>Framework</emphasis> dependencies are shipped with Listaller by default, and packagers can reference them (the list shows their IDs):</para>

		<variablelist>
			<title>Default frameworks</title>
			<varlistentry>
				<term><literal>Libc6</literal></term>
				<listitem>
					<para>The GNU standard C library.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>Linux</literal></term>
				<listitem>
					<para>Meta-framework, indicating that the software was built for GNU/Linux.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>Xorg</literal></term>
				<listitem>
					<para>The X.org X11 server.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>GNOME3</literal></term>
				<listitem>
					<para>The GNOME-3 platform libraries.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>KDELibs4</literal></term>
				<listitem>
					<para>The KDE libraries from the KDE project.</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><literal>Mesa</literal></term>
				<listitem>
					<para>The Mesa-3D libraries.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>Python2</literal></term>
				<listitem>
					<para>The Python2 scripting language.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>Python</literal></term>
				<listitem>
					<para>The Python3 scripting language.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><literal>PulseAudio</literal></term>
				<listitem>
					<para>The PulseAudio soundserver.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
</section>
