/* packagekit-plugin.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Pk", gir_namespace = "PackageKitPlugin", gir_version = "1.0", lower_case_cprefix = "pk__")]
namespace PkPlugin {
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", type_id = "pk_backend_get_type ()")]
	public class Backend : GLib.Object {
		[CCode (cname = "pk_backend_new", has_construct_function = false)]
		public Backend ();
		[CCode (cname = "pk_backend_accept_eula")]
		public void accept_eula (string eula_id);
		[CCode (cname = "pk_backend_bool_to_string")]
		public static unowned string bool_to_string (bool value);
		[CCode (cname = "pk_backend_destroy")]
		public void destroy ();
		[CCode (cname = "pk_backend_get_accepted_eula_string")]
		public string get_accepted_eula_string ();
		[CCode (cname = "pk_backend_get_author")]
		public unowned string get_author ();
		[CCode (cname = "pk_backend_get_description")]
		public unowned string get_description ();
		[CCode (cname = "pk_backend_get_filters")]
		public PackageKit.Bitfield get_filters ();
		[CCode (cname = "pk_backend_get_groups")]
		public PackageKit.Bitfield get_groups ();
		[CCode (array_length = false, array_null_terminated = true, cname = "pk_backend_get_mime_types")]
		public string[] get_mime_types ();
		[CCode (cname = "pk_backend_get_name")]
		public unowned string get_name ();
		[CCode (cname = "pk_backend_get_roles")]
		public PackageKit.Bitfield get_roles ();
		[CCode (cname = "pk_backend_get_simultaneous_mode")]
		public bool get_simultaneous_mode ();
		[CCode (cname = "pk_backend_implement")]
		public void implement (PackageKit.Role role);
		[CCode (cname = "pk_backend_initialize")]
		public void initialize ();
		[CCode (cname = "pk_backend_is_eula_valid")]
		public bool is_eula_valid (string eula_id);
		[CCode (cname = "pk_backend_is_implemented")]
		public bool is_implemented (PackageKit.Role role);
		[CCode (cname = "pk_backend_is_online")]
		public bool is_online ();
		[CCode (cname = "pk_backend_load")]
		public bool load () throws GLib.Error;
		[CCode (cname = "pk_backend_repo_list_changed")]
		public bool repo_list_changed ();
		[CCode (cname = "pk_backend_set_simultaneous_mode")]
		public void set_simultaneous_mode (bool simultaneous);
		[CCode (cname = "pk_backend_unload")]
		public bool unload ();
		[CCode (cname = "pk_backend_watch_file")]
		public bool watch_file (string filename, PkPlugin.BackendFileChanged func);
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", type_id = "pk_conf_get_type ()")]
	public class Conf : GLib.Object {
		[CCode (cname = "pk_conf_new", has_construct_function = false)]
		public Conf ();
		[CCode (cname = "pk_conf_get_bool")]
		public bool get_bool (string key);
		[CCode (cname = "pk_conf_get_filename")]
		public static string get_filename ();
		[CCode (cname = "pk_conf_get_int")]
		public int get_int (string key);
		[CCode (cname = "pk_conf_get_string")]
		public string get_string (string key);
		[CCode (array_length = false, array_null_terminated = true, cname = "pk_conf_get_strv")]
		public unowned string[] get_strv (string key);
		[CCode (cname = "pk_conf_set_bool")]
		public void set_bool (string key, bool value);
		[CCode (cname = "pk_conf_set_string")]
		public void set_string (string key, string value);
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", type_id = "pk_transaction_get_type ()")]
	public class Transaction : GLib.Object {
		[CCode (cname = "pk_transaction_new", has_construct_function = false)]
		public Transaction ();
		[CCode (cname = "pk_transaction_add_supported_content_type")]
		public void add_supported_content_type (string mime_type);
		[CCode (cname = "pk_transaction_cancel_bg")]
		public void cancel_bg ();
		[CCode (cname = "pk_transaction_get_conf")]
		public unowned PkPlugin.Conf get_conf ();
		[CCode (array_length = false, array_null_terminated = true, cname = "pk_transaction_get_full_paths")]
		public unowned string[] get_full_paths ();
		[CCode (array_length = false, array_null_terminated = true, cname = "pk_transaction_get_package_ids")]
		public unowned string[] get_package_ids ();
		[CCode (cname = "pk_transaction_get_results")]
		public unowned PackageKit.Results get_results ();
		[CCode (cname = "pk_transaction_get_role")]
		public PackageKit.Role get_role ();
		[CCode (cname = "pk_transaction_get_state")]
		public PkPlugin.TransactionState get_state ();
		[CCode (cname = "pk_transaction_get_tid")]
		public unowned string get_tid ();
		[CCode (cname = "pk_transaction_get_transaction_flags")]
		public PackageKit.Bitfield get_transaction_flags ();
		[CCode (cname = "pk_transaction_get_uid")]
		public uint get_uid ();
		[CCode (array_length = false, array_null_terminated = true, cname = "pk_transaction_get_values")]
		public unowned string[] get_values ();
		[CCode (cname = "pk_transaction_is_exclusive")]
		public bool is_exclusive ();
		[CCode (cname = "pk_transaction_reset_after_lock_error")]
		public void reset_after_lock_error ();
		[CCode (cname = "pk_transaction_run")]
		public bool run ();
		[CCode (cname = "pk_transaction_set_backend")]
		public void set_backend (PkPlugin.Backend backend);
		[CCode (cname = "pk_transaction_set_full_paths")]
		public void set_full_paths (string full_paths);
		[CCode (cname = "pk_transaction_set_package_ids")]
		public void set_package_ids (string package_ids);
		[CCode (cname = "pk_transaction_set_plugins")]
		public void set_plugins (GLib.GenericArray<void*> plugins);
		[CCode (cname = "pk_transaction_set_state")]
		public bool set_state (PkPlugin.TransactionState state);
		[CCode (cname = "pk_transaction_set_supported_roles")]
		public void set_supported_roles (GLib.GenericArray<void*> plugins);
		[CCode (cname = "pk_transaction_state_to_string")]
		public static unowned string state_to_string (PkPlugin.TransactionState state);
		public signal void finished ();
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", has_type_id = false)]
	public struct Plugin {
		public weak PkPlugin.Backend backend;
		[CCode (cname = "pk_plugin_destroy")]
		public void destroy ();
		[CCode (cname = "pk_plugin_initialize")]
		public void initialize ();
		[CCode (cname = "pk_plugin_state_changed")]
		public void state_changed ();
		[CCode (cname = "pk_plugin_transaction_content_types")]
		public void transaction_content_types (PkPlugin.Transaction transaction);
		[CCode (cname = "pk_plugin_transaction_finished_end")]
		public void transaction_finished_end (PkPlugin.Transaction transaction);
		[CCode (cname = "pk_plugin_transaction_finished_results")]
		public void transaction_finished_results (PkPlugin.Transaction transaction);
		[CCode (cname = "pk_plugin_transaction_finished_start")]
		public void transaction_finished_start (PkPlugin.Transaction transaction);
		[CCode (cname = "pk_plugin_transaction_run")]
		public void transaction_run (PkPlugin.Transaction transaction);
		[CCode (cname = "pk_plugin_transaction_started")]
		public void transaction_started (PkPlugin.Transaction transaction);
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cprefix = "PK_PLUGIN_PHASE_")]
	public enum PluginPhase {
		INIT,
		TRANSACTION_CONTENT_TYPES,
		TRANSACTION_RUN,
		TRANSACTION_STARTED,
		TRANSACTION_FINISHED_START,
		TRANSACTION_FINISHED_RESULTS,
		TRANSACTION_FINISHED_END,
		DESTROY,
		STATE_CHANGED,
		UNKNOWN
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cprefix = "PK_TRANSACTION_STATE_")]
	public enum TransactionState {
		NEW,
		WAITING_FOR_AUTH,
		COMMITTED,
		READY,
		RUNNING,
		FINISHED,
		UNKNOWN
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cprefix = "PK_TRANSACTION_ERROR_")]
	public errordomain TransactionError {
		[CCode (cname = "PK_TRANSACTION_ERROR_DENIED")]
		PERMISSIONDENIED,
		[CCode (cname = "PK_TRANSACTION_ERROR_NOT_RUNNING")]
		NOTRUNNING,
		[CCode (cname = "PK_TRANSACTION_ERROR_NO_ROLE")]
		NOROLE,
		[CCode (cname = "PK_TRANSACTION_ERROR_CANNOT_CANCEL")]
		CANNOTCANCEL,
		[CCode (cname = "PK_TRANSACTION_ERROR_NOT_SUPPORTED")]
		NOTSUPPORTED,
		[CCode (cname = "PK_TRANSACTION_ERROR_NO_SUCH_TRANSACTION")]
		NOSUCHTRANSACTION,
		[CCode (cname = "PK_TRANSACTION_ERROR_NO_SUCH_FILE")]
		NOSUCHFILE,
		[CCode (cname = "PK_TRANSACTION_ERROR_NO_SUCH_DIRECTORY")]
		NOSUCHDIRECTORY,
		[CCode (cname = "PK_TRANSACTION_ERROR_TRANSACTION_EXISTS_WITH_ROLE")]
		TRANSACTIONEXISTSWITHROLE,
		[CCode (cname = "PK_TRANSACTION_ERROR_REFUSED_BY_POLICY")]
		REFUSEDBYPOLICY,
		[CCode (cname = "PK_TRANSACTION_ERROR_PACKAGE_ID_INVALID")]
		PACKAGEIDINVALID,
		[CCode (cname = "PK_TRANSACTION_ERROR_SEARCH_INVALID")]
		SEARCHINVALID,
		[CCode (cname = "PK_TRANSACTION_ERROR_SEARCH_PATH_INVALID")]
		SEARCHPATHINVALID,
		[CCode (cname = "PK_TRANSACTION_ERROR_FILTER_INVALID")]
		FILTERINVALID,
		[CCode (cname = "PK_TRANSACTION_ERROR_INPUT_INVALID")]
		INPUTINVALID,
		[CCode (cname = "PK_TRANSACTION_ERROR_INVALID_STATE")]
		INVALIDSTATE,
		[CCode (cname = "PK_TRANSACTION_ERROR_INITIALIZE_FAILED")]
		INITIALIZEFAILED,
		[CCode (cname = "PK_TRANSACTION_ERROR_COMMIT_FAILED")]
		COMMITFAILED,
		[CCode (cname = "PK_TRANSACTION_ERROR_PACK_INVALID")]
		PACKINVALID,
		[CCode (cname = "PK_TRANSACTION_ERROR_MIME_TYPE_NOT_SUPPORTED")]
		MIMETYPENOTSUPPORTED,
		[CCode (cname = "PK_TRANSACTION_ERROR_INVALID_PROVIDE")]
		INVALIDPROVIDE,
		[CCode (cname = "PK_TRANSACTION_ERROR_NUMBER_OF_PACKAGES_INVALID")]
		NUMBEROFPACKAGESINVALID
	}
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", has_target = false)]
	public delegate void BackendFileChanged (PkPlugin.Backend backend, void* data);
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", has_target = false)]
	public delegate void PluginFunc (PkPlugin.Plugin plugin);
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", has_target = false)]
	public delegate unowned string PluginGetDescFunc ();
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", has_target = false)]
	public delegate void PluginTransactionFunc (PkPlugin.Plugin plugin, PkPlugin.Transaction transaction);
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cname = "PK_BACKEND_PERCENTAGE_INVALID")]
	public const int BACKEND_PERCENTAGE_INVALID;
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cname = "PK_CONF_VALUE_INT_MISSING")]
	public const int CONF_VALUE_INT_MISSING;
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cname = "PK_TRANSACTION_ALL_BACKEND_SIGNALS")]
	public const int TRANSACTION_ALL_BACKEND_SIGNALS;
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cname = "PK_TRANSACTION_NO_BACKEND_SIGNALS")]
	public const int TRANSACTION_NO_BACKEND_SIGNALS;
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cname = "pk_plugin_get_description")]
	public static unowned string plugin_get_description ();
	[CCode (cheader_filename = "plugin/packagekit-plugin.h", cname = "pk_transaction_error_quark")]
	public static GLib.Quark transaction_error_quark ();
}
