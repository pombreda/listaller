/* appstream.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "As", gir_namespace = "Appstream", gir_version = "0.6", lower_case_cprefix = "as__")]
namespace Appstream {
	[CCode (cheader_filename = "appstream.h", type_id = "as_category_get_type ()")]
	public class Category : GLib.Object {
		[CCode (cname = "as_category_new", has_construct_function = false)]
		public Category ();
		[CCode (cname = "as_category_add_subcategory")]
		public void add_subcategory (Appstream.Category cat);
		[CCode (cname = "as_category_complete")]
		public void complete ();
		[CCode (cname = "as_category_construct")]
		public static Appstream.Category @construct (GLib.Type object_type);
		[CCode (cname = "as_category_get_directory")]
		public unowned string get_directory ();
		[CCode (cname = "as_category_get_excluded")]
		public unowned GLib.List<string> get_excluded ();
		[CCode (cname = "as_category_get_icon")]
		public unowned string get_icon ();
		[CCode (cname = "as_category_get_included")]
		public unowned GLib.List<string> get_included ();
		[CCode (cname = "as_category_get_level")]
		public int get_level ();
		[CCode (cname = "as_category_get_name")]
		public unowned string get_name ();
		[CCode (cname = "as_category_get_subcategories")]
		public unowned GLib.List<string> get_subcategories ();
		[CCode (cname = "as_category_get_summary")]
		public unowned string get_summary ();
		[CCode (cname = "as_category_has_subcategory")]
		public bool has_subcategory ();
		[CCode (cname = "as_category_remove_subcategory")]
		public void remove_subcategory (Appstream.Category cat);
		[CCode (cname = "as_category_set_directory")]
		public void set_directory (string value);
		[CCode (cname = "as_category_set_icon")]
		public void set_icon (string value);
		[CCode (cname = "as_category_set_level")]
		public void set_level (int value);
		[CCode (cname = "as_category_set_name")]
		public void set_name (string value);
		[NoAccessorMethod]
		public string directory { owned get; set; }
		[NoAccessorMethod]
		public void* excluded { get; }
		[NoAccessorMethod]
		public string icon { owned get; set; }
		[NoAccessorMethod]
		public void* included { get; }
		[NoAccessorMethod]
		public int level { get; set; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public void* subcategories { get; }
		[NoAccessorMethod]
		public string summary { owned get; }
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_component_get_type ()")]
	public class Component : GLib.Object {
		[CCode (cname = "as_component_new", has_construct_function = false)]
		public Component ();
		[CCode (cname = "as_component_add_release")]
		public void add_release (Appstream.Release release);
		[CCode (cname = "as_component_add_screenshot")]
		public void add_screenshot (Appstream.Screenshot sshot);
		[CCode (cname = "as_component_construct")]
		public static Appstream.Component @construct (GLib.Type object_type);
		[CCode (array_length = false, array_null_terminated = true, cname = "as_component_get_categories")]
		public string[] get_categories ();
		[CCode (array_length = false, array_null_terminated = true, cname = "as_component_get_compulsory_for_desktops")]
		public unowned string[] get_compulsory_for_desktops ();
		[CCode (cname = "as_component_get_description")]
		public unowned string get_description ();
		[CCode (cname = "as_component_get_homepage")]
		public unowned string get_homepage ();
		[CCode (cname = "as_component_get_icon")]
		public unowned string get_icon ();
		[CCode (cname = "as_component_get_icon_url")]
		public unowned string get_icon_url ();
		[CCode (cname = "as_component_get_idname")]
		public unowned string get_idname ();
		[CCode (array_length = false, array_null_terminated = true, cname = "as_component_get_keywords")]
		public string[] get_keywords ();
		[CCode (cname = "as_component_get_kind")]
		public Appstream.ComponentKind get_kind ();
		[CCode (array_length = false, array_null_terminated = true, cname = "as_component_get_mimetypes")]
		public string[] get_mimetypes ();
		[CCode (cname = "as_component_get_name")]
		public unowned string get_name ();
		[CCode (cname = "as_component_get_name_original")]
		public unowned string get_name_original ();
		[CCode (cname = "as_component_get_pkgname")]
		public unowned string get_pkgname ();
		[CCode (cname = "as_component_get_project_group")]
		public unowned string get_project_group ();
		[CCode (cname = "as_component_get_project_license")]
		public unowned string get_project_license ();
		[CCode (cname = "as_component_get_provided_items")]
		public unowned GLib.GenericArray<string> get_provided_items ();
		[CCode (cname = "as_component_get_releases")]
		public unowned GLib.GenericArray<Appstream.Release> get_releases ();
		[CCode (cname = "as_component_get_screenshots")]
		public unowned GLib.GenericArray<Appstream.Screenshot> get_screenshots ();
		[CCode (cname = "as_component_get_summary")]
		public unowned string get_summary ();
		[CCode (cname = "as_component_is_valid")]
		public bool is_valid ();
		[CCode (cname = "as_component_provides_item")]
		public bool provides_item (Appstream.ProvidesKind kind, string value);
		[CCode (cname = "as_component_set_categories")]
		public void set_categories (string value);
		[CCode (cname = "as_component_set_categories_from_str")]
		public void set_categories_from_str (string categories_str);
		[CCode (cname = "as_component_set_compulsory_for_desktops")]
		public void set_compulsory_for_desktops (string value);
		[CCode (cname = "as_component_set_description")]
		public void set_description (string value);
		[CCode (cname = "as_component_set_homepage")]
		public void set_homepage (string value);
		[CCode (cname = "as_component_set_icon")]
		public void set_icon (string value);
		[CCode (cname = "as_component_set_icon_url")]
		public void set_icon_url (string value);
		[CCode (cname = "as_component_set_idname")]
		public void set_idname (string value);
		[CCode (cname = "as_component_set_keywords")]
		public void set_keywords (string value);
		[CCode (cname = "as_component_set_kind")]
		public void set_kind (Appstream.ComponentKind value);
		[CCode (cname = "as_component_set_mimetypes")]
		public void set_mimetypes (string value);
		[CCode (cname = "as_component_set_name")]
		public void set_name (string value);
		[CCode (cname = "as_component_set_name_original")]
		public void set_name_original (string value);
		[CCode (cname = "as_component_set_pkgname")]
		public void set_pkgname (string value);
		[CCode (cname = "as_component_set_project_group")]
		public void set_project_group (string value);
		[CCode (cname = "as_component_set_project_license")]
		public void set_project_license (string value);
		[CCode (cname = "as_component_set_summary")]
		public void set_summary (string value);
		[CCode (cname = "as_component_to_string")]
		public string to_string ();
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] categories { owned get; set; }
		[NoAccessorMethod]
		public string description { owned get; set; }
		[NoAccessorMethod]
		public string homepage { owned get; set; }
		[NoAccessorMethod]
		public string icon { owned get; set; }
		[NoAccessorMethod]
		public string icon_url { owned get; set; }
		[NoAccessorMethod]
		public string idname { owned get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] keywords { owned get; set; }
		[NoAccessorMethod]
		public Appstream.ComponentKind kind { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] mimetypes { owned get; set; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public string name_original { owned get; set; }
		[NoAccessorMethod]
		public string pkgname { owned get; set; }
		[NoAccessorMethod]
		public string project_license { owned get; set; }
		[NoAccessorMethod]
		public GLib.GenericArray<weak void*> screenshots { owned get; }
		[NoAccessorMethod]
		public string summary { owned get; set; }
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_database_get_type ()")]
	public class Database : GLib.Object {
		[CCode (cname = "as_database_new", has_construct_function = false)]
		public Database ();
		[CCode (cname = "as_database_construct")]
		public static Appstream.Database @construct (GLib.Type object_type);
		[CCode (cname = "as_database_db_exists")]
		public bool db_exists ();
		[CCode (cname = "as_database_find_components")]
		public GLib.GenericArray<Appstream.Component> find_components (Appstream.SearchQuery query);
		[CCode (cname = "as_database_find_components_by_str")]
		public GLib.GenericArray<Appstream.Component> find_components_by_str (string search_str, string categories_str);
		[CCode (cname = "as_database_get_all_components")]
		public GLib.GenericArray<Appstream.Component> get_all_components ();
		[CCode (cname = "as_database_get_component_by_id")]
		public Appstream.Component get_component_by_id (string idname);
		[CCode (cname = "as_database_get_components_by_provides")]
		public GLib.GenericArray<Appstream.Component> get_components_by_provides (Appstream.ProvidesKind kind, string value, string data);
		[CCode (cname = "as_database_get_database_path")]
		public unowned string get_database_path ();
		public virtual bool open ();
		[CCode (cname = "as_database_set_database_path")]
		public void set_database_path (string value);
		[NoAccessorMethod]
		public string database_path { owned get; set; }
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_distro_details_get_type ()")]
	public class DistroDetails : GLib.Object {
		[CCode (cname = "as_distro_details_new", has_construct_function = false)]
		public DistroDetails ();
		[CCode (cname = "as_distro_details_config_distro_get_bool")]
		public bool config_distro_get_bool (string key);
		[CCode (cname = "as_distro_details_config_distro_get_str")]
		public string config_distro_get_str (string key);
		[CCode (cname = "as_distro_details_construct")]
		public static Appstream.DistroDetails @construct (GLib.Type object_type);
		[CCode (cname = "as_distro_details_get_distro_id")]
		public unowned string get_distro_id ();
		[CCode (cname = "as_distro_details_get_distro_name")]
		public unowned string get_distro_name ();
		[CCode (cname = "as_distro_details_get_distro_version")]
		public unowned string get_distro_version ();
		[CCode (array_length = false, array_null_terminated = true, cname = "as_distro_details_get_icon_repository_paths")]
		public string[] get_icon_repository_paths ();
		[NoAccessorMethod]
		public string distro_id { owned get; }
		[NoAccessorMethod]
		public string distro_name { owned get; }
		[NoAccessorMethod]
		public string distro_version { owned get; }
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_image_get_type ()")]
	public class Image : GLib.Object {
		[CCode (cname = "as_image_new", has_construct_function = false)]
		public Image ();
		[CCode (cname = "as_image_get_height")]
		public uint get_height ();
		[CCode (cname = "as_image_get_kind")]
		public Appstream.ImageKind get_kind ();
		[CCode (cname = "as_image_get_url")]
		public unowned string get_url ();
		[CCode (cname = "as_image_get_width")]
		public uint get_width ();
		[CCode (cname = "as_image_kind_from_string")]
		public static Appstream.ImageKind kind_from_string (string kind);
		[CCode (cname = "as_image_kind_to_string")]
		public static unowned string kind_to_string (Appstream.ImageKind kind);
		[CCode (cname = "as_image_set_height")]
		public void set_height (uint height);
		[CCode (cname = "as_image_set_kind")]
		public void set_kind (Appstream.ImageKind kind);
		[CCode (cname = "as_image_set_url")]
		public void set_url (string url);
		[CCode (cname = "as_image_set_width")]
		public void set_width (uint width);
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_menu_parser_get_type ()")]
	public class MenuParser : GLib.Object {
		[CCode (cname = "as_menu_parser_new", has_construct_function = false)]
		public MenuParser ();
		[CCode (cname = "as_menu_parser_construct")]
		public static Appstream.MenuParser @construct (GLib.Type object_type);
		[CCode (cname = "as_menu_parser_construct_from_file")]
		public static Appstream.MenuParser construct_from_file (GLib.Type object_type, string menu_file);
		[CCode (cname = "as_menu_parser_new_from_file", has_construct_function = false)]
		public MenuParser.from_file (string menu_file);
		[CCode (cname = "as_menu_parser_get_update_category_data")]
		public bool get_update_category_data ();
		[CCode (cname = "as_menu_parser_parse")]
		public GLib.List<Appstream.Category> parse ();
		[CCode (cname = "as_menu_parser_set_update_category_data")]
		public void set_update_category_data (bool value);
		[NoAccessorMethod]
		public bool update_category_data { get; set; }
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_metadata_get_type ()")]
	public class Metadata : GLib.Object {
		[CCode (cname = "as_metadata_new", has_construct_function = false)]
		public Metadata ();
		[CCode (cname = "as_metadata_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "as_metadata_get_locale")]
		public unowned string get_locale ();
		[CCode (cname = "as_metadata_parse_data")]
		public Appstream.Component parse_data (string data) throws GLib.Error;
		[CCode (cname = "as_metadata_parse_file")]
		public Appstream.Component parse_file (GLib.File infile) throws GLib.Error;
		[CCode (cname = "as_metadata_set_locale")]
		public void set_locale (string locale);
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_release_get_type ()")]
	public class Release : GLib.Object {
		[CCode (cname = "as_release_new", has_construct_function = false)]
		public Release ();
		[CCode (cname = "as_release_get_description")]
		public unowned string get_description ();
		[CCode (cname = "as_release_get_timestamp")]
		public uint64 get_timestamp ();
		[CCode (cname = "as_release_get_version")]
		public unowned string get_version ();
		[CCode (cname = "as_release_set_description")]
		public void set_description (string description);
		[CCode (cname = "as_release_set_timestamp")]
		public void set_timestamp (uint64 timestamp);
		[CCode (cname = "as_release_set_version")]
		public void set_version (string version);
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_screenshot_get_type ()")]
	public class Screenshot : GLib.Object {
		[CCode (cname = "as_screenshot_new", has_construct_function = false)]
		public Screenshot ();
		[CCode (cname = "as_screenshot_add_image")]
		public void add_image (Appstream.Image image);
		[CCode (cname = "as_screenshot_get_caption")]
		public unowned string get_caption ();
		[CCode (cname = "as_screenshot_get_images")]
		public unowned GLib.GenericArray<Appstream.Image> get_images ();
		[CCode (cname = "as_screenshot_get_kind")]
		public Appstream.ScreenshotKind get_kind ();
		[CCode (cname = "as_screenshot_is_valid")]
		public bool is_valid ();
		[CCode (cname = "as_screenshot_kind_from_string")]
		public static Appstream.ScreenshotKind kind_from_string (string kind);
		[CCode (cname = "as_screenshot_kind_to_string")]
		public static unowned string kind_to_string (Appstream.ScreenshotKind kind);
		[CCode (cname = "as_screenshot_set_caption")]
		public void set_caption (string caption);
		[CCode (cname = "as_screenshot_set_kind")]
		public void set_kind (Appstream.ScreenshotKind kind);
	}
	[CCode (cheader_filename = "appstream.h", type_id = "as_search_query_get_type ()")]
	public class SearchQuery : GLib.Object {
		[CCode (cname = "as_search_query_new", has_construct_function = false)]
		public SearchQuery (string term);
		[CCode (cname = "as_search_query_construct")]
		public static Appstream.SearchQuery @construct (GLib.Type object_type, string term);
		[CCode (array_length = false, array_null_terminated = true, cname = "as_search_query_get_categories")]
		public string[] get_categories ();
		[CCode (cname = "as_search_query_get_search_all_categories")]
		public bool get_search_all_categories ();
		[CCode (cname = "as_search_query_get_search_term")]
		public unowned string get_search_term ();
		[CCode (cname = "as_search_query_sanitize_search_term")]
		public void sanitize_search_term ();
		[CCode (cname = "as_search_query_set_categories")]
		public void set_categories (string value);
		[CCode (cname = "as_search_query_set_categories_from_string")]
		public void set_categories_from_string (string categories_str);
		[CCode (cname = "as_search_query_set_search_all_categories")]
		public void set_search_all_categories ();
		[CCode (cname = "as_search_query_set_search_term")]
		public void set_search_term (string value);
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] categories { owned get; set; }
		[NoAccessorMethod]
		public string search_term { owned get; set; }
	}
	[CCode (cheader_filename = "appstream.h", cprefix = "AS_COMPONENT_KIND_", type_id = "as_component_kind_get_type ()")]
	public enum ComponentKind {
		UNKNOWN,
		GENERIC,
		DESKTOP_APP,
		FONT,
		CODEC,
		INPUTMETHOD,
		LAST
	}
	[CCode (cheader_filename = "appstream.h", cprefix = "AS_IMAGE_KIND_", has_type_id = false)]
	public enum ImageKind {
		UNKNOWN,
		SOURCE,
		THUMBNAIL
	}
	[CCode (cheader_filename = "appstream.h", cprefix = "AS_METADATA_ERROR_", has_type_id = false)]
	public enum MetadataError {
		FAILED,
		LAST
	}
	[CCode (cheader_filename = "appstream.h", cprefix = "AS_PROVIDES_KIND_", has_type_id = false)]
	public enum ProvidesKind {
		UNKNOWN,
		LIBRARY,
		BINARY,
		FONT,
		MODALIAS,
		FIRMWARE,
		PYTHON2,
		PYTHON3,
		LAST
	}
	[CCode (cheader_filename = "appstream.h", cprefix = "AS_SCREENSHOT_KIND_", has_type_id = false)]
	public enum ScreenshotKind {
		UNKNOWN,
		NORMAL,
		DEFAULT
	}
	[CCode (cheader_filename = "appstream.h", cname = "as_component_kind_from_string")]
	public static Appstream.ComponentKind component_kind_from_string (string kind_str);
	[CCode (cheader_filename = "appstream.h", cname = "as_component_kind_to_string")]
	public static unowned string component_kind_to_string (Appstream.ComponentKind kind);
	[CCode (cheader_filename = "appstream.h", cname = "as_get_system_categories")]
	public static GLib.List<Appstream.Category> get_system_categories ();
	[CCode (cheader_filename = "appstream.h", cname = "as_provides_item_create")]
	public static string provides_item_create (Appstream.ProvidesKind kind, string value, string data);
	[CCode (cheader_filename = "appstream.h", cname = "as_provides_item_get_kind")]
	public static Appstream.ProvidesKind provides_item_get_kind (string item);
	[CCode (cheader_filename = "appstream.h", cname = "as_provides_item_get_value")]
	public static string provides_item_get_value (string item);
	[CCode (cheader_filename = "appstream.h", cname = "as_provides_kind_from_string")]
	public static Appstream.ProvidesKind provides_kind_from_string (string kind_str);
	[CCode (cheader_filename = "appstream.h", cname = "as_provides_kind_to_string")]
	public static unowned string provides_kind_to_string (Appstream.ProvidesKind kind);
}
